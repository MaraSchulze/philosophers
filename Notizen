central lock for taking a lock for forks.

lock for logging.

philosophers are threads.

Setup: Locks und threads

Thread:
	Loop:
		We try a lock.
		We print out message taken forks
		We check for die time and perhaps die
		We print out message eating
		We print out message sleeping
		We sleep
		We print out message thinking

Datenstrukturen:
	struct mit Daten fuer jeden Philosopher, mit den Locks, mit function pointer for logging function

flags for lock status

maybe priority lock for dying philosophers?

table: read/write locks for forks. they are either -1 or time until free again. 

logger: normal lock, priority lock, read/write lock for priority status

time: regularly check for time, so that we know that we must die. calculate eat and sleep time, if die time is smaller. 

how stop simulation? just end main.

		
=================================

-Threadfunktion philosopher
-struct data: args data, pointer to table, pointer to logger
-struct table: locks and status vars
-struct logger: locks
-array with threads
-main: setup and thread start, then thread join, then cleanup

=================================

Hilfsfunktionen:
-calculate time to die
-get time
-malloc and fill in data structures
-start threads
-call join on all threads
-cleanup
